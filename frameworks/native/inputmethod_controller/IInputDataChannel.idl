/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

sequenceable input_method_utils..OHOS.MiscServices.TextTotalConfigInner;
sequenceable input_method_utils..OHOS.MiscServices.KeyboardStatus;
sequenceable input_method_utils..OHOS.MiscServices.PanelStatusInfoInner;
sequenceable input_method_utils..OHOS.MiscServices.FunctionKey;
sequenceable input_method_utils..OHOS.MiscServices.Value;
sequenceable input_method_utils..OHOS.MiscServices.RangeInner;
sequenceable input_method_utils..OHOS.MiscServices.ArrayBuffer;
interface OHOS.MiscServices.IInputDataChannel {
    [ipccode 0, oneway] void InsertText([in] String text, [in] unsigned long msgId);
    [oneway] void DeleteForward([in] int length, [in] unsigned long msgId);
    [oneway] void DeleteBackward([in] int length, [in] unsigned long msgId);
    [oneway] void GetTextBeforeCursor([in] int number, [in] unsigned long msgId);
    [oneway] void GetTextAfterCursor([in] int number, [in] unsigned long msgId);
    [oneway] void GetTextConfig([in] struct TextTotalConfigInner textConfiginner, [in] unsigned long msgId);
    void GetTextConfigSync([out] struct TextTotalConfigInner textConfiginner);
    [oneway] void SendKeyboardStatus([in] int status, [in] unsigned long msgId);
    [oneway] void SendFunctionKey([in] int funcKey, [in] unsigned long msgId);
    [oneway] void MoveCursor([in] int keyCode, [in] unsigned long msgId);
    [oneway] void GetEnterKeyType([in] unsigned long msgId);
    [oneway] void GetInputPattern([in] unsigned long msgId);
    [oneway] void SelectByRange([in] int start, [in] int end, [in] unsigned long msgId);
    [oneway] void SelectByMovement([in] int direction, [in] int cursorMoveSkip, [in] unsigned long msgId);
    [oneway] void HandleExtendAction([in] int action, [in] unsigned long msgId);
    [oneway] void GetTextIndexAtCursor([in] unsigned long msgId);
    [oneway] void NotifyPanelStatusInfo([in] PanelStatusInfoInner info, [in] unsigned long msgId);
    [oneway] void NotifyKeyboardHeight([in] unsigned int height, [in] unsigned long msgId);
    [oneway] void SendPrivateCommand([in] Value value, [in] unsigned long msgId);
    [oneway] void SetPreviewText([in] String text, [in] RangeInner rangeInner, [in] unsigned long msgId);
    [oneway] void FinishTextPreview([in] unsigned long msgId);
    [oneway] void SendMessage([in] ArrayBuffer arraybuffer, [in] unsigned long msgId);
}
