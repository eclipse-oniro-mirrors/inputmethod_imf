# Copyright (C) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/inputmethod/imf/inputmethod.gni")
import("//build/test.gni")

config("module_private_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "${inputmethod_path}/frameworks/ndk/include",
    "${inputmethod_path}/interfaces/kits/c",
    "${inputmethod_path}/services/include",
    "${inputmethod_path}/test/common",
    "${inputmethod_path}/services/adapter/settings_data_provider/common/include",
  ]
}

module_output_path = "imf/cpp"

ohos_unittest("ImeMixedTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./inputmethod_blocklist.txt"
  }
  module_out_path = module_output_path

  sources = [
    "combination_key_test.cpp",
    "enable_ime_data_parser_test.cpp",
    "focus_change_listener_test.cpp",
    "ime_connection_test.cpp",
    "ime_info_inquirer_test.cpp",
    "input_event_callback_test.cpp",
    "keyboard_event_test.cpp",
    "os_account_adapter_test.cpp",
    "security_mode_parser_test.cpp",
    "serializable_test.cpp",
    "settings_data_utils_test.cpp",
    "sys_cfg_parser_test.cpp",
    "system_language_observer_test.cpp",
    "user_session_manager_test.cpp",
    "wms_connection_observer_test.cpp",
  ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability_static",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service_static",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libdm",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}
