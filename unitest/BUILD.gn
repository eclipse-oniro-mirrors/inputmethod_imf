# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/inputmethod/imf/inputmethod.gni")
import("//build/test.gni")

config("module_private_config") {
  visibility = [ ":*" ]

  include_dirs = [ "include" ]
}

module_output_path = "imf/inputmethod_service"

ohos_unittest("InputMethodControllerTest") {
  module_out_path = module_output_path

  sources = [ "src/input_method_controller_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${ability_runtime_inner_api_path}/ability_manager:ability_manager",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "//base/inputmethod/imf/frameworks/inputmethod_ability:inputmethod_ability",
    "//base/inputmethod/imf/frameworks/inputmethod_controller:inputmethod_client",
    "//base/inputmethod/imf/services:inputmethod_service",
    "//base/security/access_token/interfaces/innerkits/token_setproc:libtoken_setproc",
    "//foundation/arkui/napi/:ace_napi",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_single:ipc_single",
    "//foundation/systemabilitymgr/safwk/interfaces/innerkits/safwk:system_ability_fwk",
    "//foundation/systemabilitymgr/samgr/interfaces/innerkits/samgr_proxy:samgr_proxy",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "c_utils:utils",
    "hiviewdfx_hilog_native:libhilog",
  ]
}

ohos_unittest("InputMethodAbilityTest") {
  module_out_path = module_output_path

  sources = [ "src/input_method_ability_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${ability_runtime_inner_api_path}/ability_manager:ability_manager",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "//base/inputmethod/imf/frameworks/inputmethod_ability:inputmethod_ability",
    "//base/inputmethod/imf/frameworks/inputmethod_controller:inputmethod_client",
    "//base/inputmethod/imf/services:inputmethod_service",
    "//foundation/arkui/napi/:ace_napi",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_single:ipc_single",
    "//foundation/systemabilitymgr/safwk/interfaces/innerkits/safwk:system_ability_fwk",
    "//foundation/systemabilitymgr/samgr/interfaces/innerkits/samgr_proxy:samgr_proxy",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "hiviewdfx_hilog_native:libhilog",
  ]
}

ohos_unittest("InputMethodServiceTest") {
  module_out_path = module_output_path

  sources = [ "src/input_method_service_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${ability_runtime_inner_api_path}/ability_manager:ability_manager",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "//base/inputmethod/imf/frameworks/inputmethod_ability:inputmethod_ability",
    "//base/inputmethod/imf/frameworks/inputmethod_controller:inputmethod_client",
    "//base/inputmethod/imf/services:inputmethod_service",
    "//foundation/arkui/napi/:ace_napi",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_single:ipc_single",
    "//foundation/systemabilitymgr/safwk/interfaces/innerkits/safwk:system_ability_fwk",
    "//foundation/systemabilitymgr/samgr/interfaces/innerkits/samgr_proxy:samgr_proxy",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "c_utils:utils",
    "hiviewdfx_hilog_native:libhilog",
    "input:libmmi-client",
  ]
}

group("unittest") {
  testonly = true

  deps = []

  deps += [
    ":InputMethodAbilityTest",
    ":InputMethodControllerTest",
    ":InputMethodServiceTest",
  ]
}
