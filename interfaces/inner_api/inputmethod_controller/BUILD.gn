# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/inputmethod/imf/inputmethod.gni")
import("//build/ohos.gni")

config("inputmethod_client_native_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "include",
    "${inputmethod_path}/common/include",
    "${inputmethod_path}/frameworks/common",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/include",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller/include",
    "${inputmethod_path}/services/include",
  ]
}

config("inputmethod_client_native_public_config") {
  visibility = [ "./*" ]
  include_dirs = [
    "include",
    "${inputmethod_path}/common/include",
    "${inputmethod_path}/frameworks/common",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/include",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/include",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability/include",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller/include",
    "${inputmethod_path}/services/include",
  ]
}

ohos_shared_library("inputmethod_client") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  sources = [
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_agent_proxy.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/ime_event_monitor_manager.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/ime_event_monitor_manager_impl.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/ime_system_channel.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/input_client_stub.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/input_data_channel_stub.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/input_method_controller.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/input_method_system_ability_proxy.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/input_method_utils.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/keyevent_consumer_stub.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/system_cmd_channel_stub.cpp",
  ]

  cflags_cc = [
    "-fvisibility=hidden",
    "-fvisibility-inlines-hidden",
    "-fdata-sections",
    "-ffunction-sections",
    "-Os",
  ]

  version_script = "inputmethod_client.versionscript"

  innerapi_tags = [ "platformsdk" ]

  deps = [ "${inputmethod_path}/common:inputmethod_common" ]

  external_deps = [
    "ability_base:want",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  configs = [ ":inputmethod_client_native_config" ]

  public_configs = [ ":inputmethod_client_native_public_config" ]

  subsystem_name = "inputmethod"
  part_name = "imf"
}

ohos_static_library("inputmethod_client_static") {
  testonly = true
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  sources = [
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_agent_proxy.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/ime_event_monitor_manager.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/ime_event_monitor_manager_impl.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/ime_system_channel.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/input_client_stub.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/input_data_channel_stub.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/input_method_controller.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/input_method_system_ability_proxy.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/input_method_utils.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/keyevent_consumer_stub.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/system_cmd_channel_stub.cpp",
  ]

  public_configs = [ ":inputmethod_client_native_public_config" ]

  deps = [ "${inputmethod_path}/common:inputmethod_common" ]

  external_deps = [
    "ability_base:want",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  subsystem_name = "inputmethod"
  part_name = "imf"
}
